import 'dart:convert';
// import 'dart:developer';

import 'package:earsip2/admin/cobakoneksi2.dart';
// import 'package:earsip2/admin/cobakoneksiupbjj.dart';
import 'package:flutter/material.dart';
import 'cobakoneksi2service.dart';
import 'cobakoneksi.dart.bak' as aaa;
import 'package:http/http.dart' as http;

final GlobalKey<ScaffoldState> _scaffoldState = GlobalKey<ScaffoldState>();

class FormAddScreen extends StatefulWidget {
  //Edit

  
  Arsip arsip;
  FormAddScreen({this.arsip});

  @override
  _FormAddScreenState createState() => _FormAddScreenState();
}

class _FormAddScreenState extends State<FormAddScreen> {
  //dropdown
  final String urlupbjj = 'http://192.168.43.149/api/upbjj';
  List dataupbjj;
  void getDataupbjj() async {
    final respose = await http.get(urlupbjj); 
    var listData = jsonDecode(respose.body); 
    print("data : $listData"); 
    setState(() {
      dataupbjj = listData;
    });
  }
  // Future<String> getUpbjj() async{
  //   var res = await http.get(Uri.encodeFull(urlupbjj), headers: {"Accept": "application/json"});

  //   var resbody = jsonDecode(res.body);
  //   setState(() {
  //     dataupbjj = resbody;
  //   });
  //   return "Sucess";
  // }
  String valdataupbjj;
  bool _isLoading = false;
  ApiService _apiService = ApiService();
  bool _isFieldNamaValid;

  //coba
  bool _isFieldBatchValid;
  bool _isFieldNimValid;
  bool _isFieldProdiValid;
  bool _isFieldUpbjjValid;
  bool _isFieldYudisiumValid;
  // bool _isFieldNoijazahValid;
  // bool _isFieldNoijazahaktaValid;
  bool _isFieldKirimValid;
  TextEditingController _controllerBatch = TextEditingController();
  TextEditingController _controllerNim = TextEditingController();
  TextEditingController _controllerProdi = TextEditingController();
  TextEditingController _controllerUpbjj = TextEditingController();
  TextEditingController _controllerYudisium = TextEditingController();
  // TextEditingController _controllerNoijazah = TextEditingController();
  // TextEditingController _controllerNoijazahakta = TextEditingController();
  TextEditingController _controllerKirim = TextEditingController();
  TextEditingController _controllerNama = TextEditingController();

  @override
  void initState() {
    super.initState();
    getDataupbjj();

    if (widget.arsip != null) {
      _isFieldBatchValid = true;
      _controllerBatch.text = widget.arsip.batch;

      _isFieldNamaValid = true;
      _controllerNama.text = widget.arsip.nama;

      _isFieldNimValid = true;
      _controllerNim.text = widget.arsip.nim.toString();

      _isFieldProdiValid = true;
      _controllerProdi.text = widget.arsip.prodi;

      _isFieldUpbjjValid = true;
      valdataupbjj = widget.arsip.upbjj;
      // _controllerUpbjj.text = widget.arsip.upbjj;

      _isFieldYudisiumValid = true;
      _controllerYudisium.text = widget.arsip.yudisium.toString();

      _isFieldKirimValid = true;
      _controllerKirim.text = widget.arsip.kirim;
    }
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldState,
      appBar: AppBar(
        iconTheme: IconThemeData(color: Colors.white),
        title: Text(
          widget.arsip == null ? "Form Add" : "Change Data",
          style: TextStyle(color: Colors.white),
        ),
      ),
      body: ListView(
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: <Widget>[
                _buildTextFieldBatch(),
                _buildTextFieldNim(),

                _buildTextFieldNama(),

                _buildTextFieldProdi(),
                _buildTextFieldUpbjj(),
                _buildTextFieldYudisium(),
                // _buildTextFieldNoijazah(),
                // _buildTextFieldNoijazahakta(),
                _buildTextFieldKirim(),
               
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: RaisedButton(
                    onPressed: () {
                      if (
                        _isFieldBatchValid == null ||
                        _isFieldNimValid == null ||
                        _isFieldNamaValid == null ||
                        _isFieldProdiValid == null ||
                        // _isFieldUpbjjValid == null ||
                        _isFieldYudisiumValid == null ||
                        // _isFieldNoijazahValid == null ||
                        // _isFieldNoijazahaktaValid == null ||
                        _isFieldKirimValid == null ||
                         
                        !_isFieldBatchValid ||
                        !_isFieldNimValid ||
                        !_isFieldNamaValid ||
                        !_isFieldProdiValid ||
                        // !_isFieldUpbjjValid ||
                        !_isFieldYudisiumValid ||
                        // !_isFieldNoijazahValid ||
                        // !_isFieldNoijazahaktaValid ||
                        !_isFieldKirimValid
                      ) {
                        _scaffoldState.currentState.showSnackBar(
                          SnackBar(
                            content: Text("Please fill all field"),
                          ),
                        );
                        return;
                      }
                      setState(() => _isLoading = true);

                      String batch = _controllerBatch.text.toString();
                      int nim = int.parse(_controllerNim.text.toString());
                      String nama = _controllerNama.text.toString();
                      String prodi = _controllerProdi.text.toString();
                      // String upbjj = _controllerUpbjj.text.toString();
                      String upbjj = valdataupbjj;
                      int yudisium = int.parse(_controllerYudisium.text.toString());
                      String kirim = _controllerKirim.text.toString();
                      
                      Arsip arsip =
                          Arsip(
                            batch: batch,
                            nim: nim,
                            nama: nama,
                            prodi: prodi,
                            upbjj: upbjj,
                            yudisium: yudisium,
                            kirim: kirim,
                          );
                          if (widget.arsip == null) {
                            _apiService.createArsip(arsip).then((isSuccess) {
                              setState(() => _isLoading = false);
                              if (isSuccess) {
                                Navigator.push(context, MaterialPageRoute(builder: (context){
                                  return aaa.HomeScreen();
                                }));
                                // Navigator.pop(_scaffoldState.currentState.context);
                              } else {
                                _scaffoldState.currentState.showSnackBar(SnackBar(
                                  content: Text(isSuccess.toString()),
                                ));
                              }
                            });

                          }else { //Jika Widget == 0//
                            arsip.id = widget.arsip.id;
                            _apiService.updateArsip(arsip).then((isSuccess) {
                              setState(() => _isLoading = false);
                              if (isSuccess) {
                                Navigator.push(context, MaterialPageRoute(builder: (context){
                                  return aaa.HomeScreen();
                                }));
                              } else {
                                _scaffoldState.currentState.showSnackBar(SnackBar(
                                  content: Text("Update data failed"),
                                ));
                              }
                            });
                          }
                      
                    },
                    child: Text(
                      widget.arsip == null
                      ? "Submit".toUpperCase()
                      : "Update Data".toUpperCase(),
                      style: TextStyle(
                        color: Colors.white,
                      ),
                    ),
                    color: Colors.orange[600],
                  ),
                )
              ],
            ),
          ),
          _isLoading
              ? Stack(
                  children: <Widget>[
                    Opacity(
                      opacity: 0.3,
                      child: ModalBarrier(
                        dismissible: false,
                        color: Colors.grey,
                      ),
                    ),
                    Center(
                      child: CircularProgressIndicator(),
                    ),
                  ],
                )
              : Container(),
        ],
      ),
    );
  }

  Widget _buildTextFieldNama() {
    return TextField(
      controller: _controllerNama,
      keyboardType: TextInputType.text,
      decoration: InputDecoration(
        labelText: "Full nama",
        errorText: _isFieldNamaValid == null || _isFieldNamaValid
            ? null
            : "Full name is required",
      ),
      onChanged: (value) {
        bool isFieldValid = value.trim().isNotEmpty;
        if (isFieldValid != _isFieldNamaValid) {
          setState(() => _isFieldNamaValid = isFieldValid);
        }
      },
    );
  }

  Widget _buildTextFieldBatch() {
    return TextField(
      controller: _controllerBatch,
      keyboardType: TextInputType.text,
      decoration: InputDecoration(
        labelText: "Batch",
        errorText: _isFieldBatchValid == null || _isFieldBatchValid
            ? null
            : "Batch",
      ),
      onChanged: (value) {
        bool isFieldValid = value.trim().isNotEmpty;
        if (isFieldValid != _isFieldBatchValid) {
          setState(() => _isFieldBatchValid = isFieldValid);
        }
      },
    );
  }

  Widget _buildTextFieldNim() {
    return TextField(
      controller: _controllerNim,
      keyboardType: TextInputType.number,
      decoration: InputDecoration(
        labelText: "Nomor Induk Mahasiswa",
        errorText: _isFieldNimValid == null || _isFieldNimValid
            ? null
            : "Nomor Induk Mahasiswa",
      ),
      onChanged: (value) {
        bool isFieldValid = value.trim().isNotEmpty;
        if (isFieldValid != _isFieldNimValid) {
          setState(() => _isFieldNimValid = isFieldValid);
        }
      },
    );
  }

  Widget _buildTextFieldProdi() {
    return TextField(
      controller: _controllerProdi,
      keyboardType: TextInputType.text,
      decoration: InputDecoration(
        labelText: "Program Studi",
        errorText: _isFieldProdiValid == null || _isFieldProdiValid
            ? null
            : "Program Studi",
      ),
      onChanged: (value) {
        bool isFieldValid = value.trim().isNotEmpty;
        if (isFieldValid != _isFieldProdiValid) {
          setState(() => _isFieldProdiValid = isFieldValid);
        }
      },
    );
  }

  Widget _buildTextFieldUpbjj() {
    return DropdownButton(
              hint: Text("Select Province"),
              value: valdataupbjj,
              items: dataupbjj?.map((item) {
                return DropdownMenuItem(
                  child: Text(item['namaupbjj']),
                  value: item['namaupbjj'],
                );
              })?.toList() ?? [],
              onChanged: (value) {
               setState(() {
                 valdataupbjj = value;
               });
              },
            );
    
    // return TextField(
    //   controller: _controllerUpbjj,
    //   keyboardType: TextInputType.text,
    //   decoration: InputDecoration(
    //     labelText: "UPBJJ - UT",
    //     errorText: _isFieldUpbjjValid == null || _isFieldUpbjjValid
    //         ? null
    //         : "UPBJJ - UT",
    //   ),
    //   onChanged: (value) {
    //     bool isFieldValid = value.trim().isNotEmpty;
    //     if (isFieldValid != _isFieldUpbjjValid) {
    //       setState(() => _isFieldUpbjjValid = isFieldValid);
    //     }
    //   },
    // );
  }

  Widget _buildTextFieldYudisium() {
    return TextField(
      controller: _controllerYudisium,
      keyboardType: TextInputType.number,
      decoration: InputDecoration(
        labelText: "Masa Yudisium",
        errorText: _isFieldYudisiumValid == null || _isFieldYudisiumValid
            ? null
            : "Masa Yudisium",
      ),
      onChanged: (value) {
        bool isFieldValid = value.trim().isNotEmpty;
        if (isFieldValid != _isFieldYudisiumValid) {
          setState(() => _isFieldYudisiumValid = isFieldValid);
        }
      },
    );
  }

  Widget _buildTextFieldKirim() {
    return TextField(
      controller: _controllerKirim,
      keyboardType: TextInputType.text,
      decoration: InputDecoration(
        labelText: "Tanggal Kirim",
        errorText: _isFieldKirimValid == null || _isFieldKirimValid
            ? null
            : "Tanggal Kirim",
      ),
      onChanged: (value) {
        bool isFieldValid = value.trim().isNotEmpty;
        if (isFieldValid != _isFieldKirimValid) {
          setState(() => _isFieldKirimValid = isFieldValid);
        }
      },
    );
  }

  // Widget _buildTextFieldEmail() {
  //   return TextField(
  //     controller: _controllerEmail,
  //     keyboardType: TextInputType.emailAddress,
  //     decoration: InputDecoration(
  //       labelText: "Email",
  //       errorText: _isFieldEmailValid == null || _isFieldEmailValid
  //           ? null
  //           : "Email is required",
  //     ),
  //     onChanged: (value) {
  //       bool isFieldValid = value.trim().isNotEmpty;
  //       if (isFieldValid != _isFieldEmailValid) {
  //         setState(() => _isFieldEmailValid = isFieldValid);
  //       }
  //     },
  //   );
  // }

  // Widget _buildTextFieldAge() {
  //   return TextField(
  //     controller: _controllerAge,
  //     keyboardType: TextInputType.number,
  //     decoration: InputDecoration(
  //       labelText: "Age",
  //       errorText: _isFieldAgeValid == null || _isFieldAgeValid
  //           ? null
  //           : "Age is required",
  //     ),
  //     onChanged: (value) {
  //       bool isFieldValid = value.trim().isNotEmpty;
  //       if (isFieldValid != _isFieldAgeValid) {
  //         setState(() => _isFieldAgeValid = isFieldValid);
  //       }
  //     },
  //   );
  // }
}